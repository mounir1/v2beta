{"version":3,"sources":["angularjs-gauge.js"],"names":["angular","gaugeMeterDirective","tpl","defaults","size","value","undefined","cap","thick","type","foregroundColor","backgroundColor","Gauge","element","options","this","find","text","legend","unit","context","getContext","init","prototype","setupStyles","create","canvas","width","height","lineCap","lineWidth","lfs","llh","css","display","fontWeight","position","fontFamily","textAlign","overflow","textOverflow","fontSize","lineHeight","textDecoration","fs","lh","parseInt","animate","requestID","window","requestAnimationFrame","head","tail","beginPath","newPos","movePerFrame","arc","center","x","y","radius","strokeStyle","stroke","cancelAnimationFrame","getType","bounds","getBounds","getCenter","getValue","getRadius","getForegroundColor","distance","drawShell","Math","PI","start","end","clear","clearRect","getWidth","getHeight","update","destroy","getThickness","val","used","total","getBackgroundColor","getLineCap","restrict","replace","template","scope","append","label","prepend","link","watchData","nv","ov","gauge","equals","watchOther","isDefined","$watch","$on","module","directive","$inject"],"mappings":"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","file":"angularjs-gauge.min.js","sourceRoot":"/source/","sourcesContent":["(function (angular) {\r\n    'use strict';\r\n    angular\r\n        .module('angularjs-gauge', [])\r\n        .directive('ngGauge', gaugeMeterDirective);\r\n\r\n    gaugeMeterDirective.$inject = [];\r\n\r\n    function gaugeMeterDirective() {\r\n\r\n        var tpl = '<div style=\"display:inline;text-align:center;position:relative;\"><span><u>{{prepend}}</u>{{value}}<u>{{append}}</u></span><b>{{label}}</b><canvas></canvas></div>';\r\n\r\n        var defaults = {\r\n                size: 200,\r\n                value: undefined,\r\n                cap: 'butt',\r\n                thick: 2,\r\n                type: 'full',\r\n                foregroundColor: '#FFCC66',\r\n                backgroundColor: '#CCC'\r\n            },\r\n\r\n            Gauge = function (element, options) {\r\n                this.element = element.find('canvas')[0];\r\n                this.text = element.find('span');\r\n                this.legend = element.find('b');\r\n                this.unit = element.find('u');\r\n                this.context = this.element.getContext('2d');\r\n                this.options = options;\r\n                this.init();\r\n            };\r\n\r\n        Gauge.prototype = {\r\n            init: function () {\r\n                this.setupStyles();\r\n                this.create();\r\n            },\r\n\r\n            setupStyles: function () {\r\n\r\n                this.context.canvas.width = this.options.size;\r\n                this.context.canvas.height = this.options.size;\r\n                this.context.lineCap = this.options.cap;\r\n                this.context.lineWidth = this.options.thick;\r\n\r\n                var lfs = this.options.size * 0.22,\r\n                    llh = this.options.size;\r\n\r\n                this.text.css({\r\n                    display: 'inline-block',\r\n                    fontWeight: 100,\r\n                    width: '100%',\r\n                    position: 'absolute',\r\n                    fontFamily: 'Open Sans',\r\n                    textAlign: 'center',\r\n                    overflow: 'hidden',\r\n                    textOverflow: 'ellipsis',\r\n                    fontSize: lfs + 'px',\r\n                    lineHeight: llh + 'px'\r\n                });\r\n\r\n                this.unit.css({\r\n                    textDecoration: 'none',\r\n                    fontSize: '0.6em',\r\n                    fontWeight: 200\r\n                });\r\n\r\n                var fs = this.options.size / 13;\r\n                var lh = (5 * fs) + parseInt(this.options.size);\r\n\r\n                this.legend.css({\r\n                    display: 'inline-block',\r\n                    width: '100%',\r\n                    position: 'absolute',\r\n                    fontFamily: 'Open Sans',\r\n                    textAlign: 'center',\r\n                    overflow: 'hidden',\r\n                    textOverflow: 'ellipsis',\r\n                    fontWeight: 200,\r\n                    fontSize: fs + 'px',\r\n                    lineHeight: lh + 'px'\r\n                });\r\n            },\r\n            create: function () {\r\n\r\n                var type = this.getType(),\r\n                    bounds = this.getBounds(type),\r\n                    movePerFrame = 0.0174532925,\r\n                    center = this.getCenter(),\r\n                    context = this.context,\r\n                    value = this.getValue(),\r\n                    radius = this.getRadius(),\r\n                    foregroundColor = this.getForegroundColor(),\r\n                    requestID,\r\n                    head = bounds.head,\r\n                    tail = bounds.tail,\r\n                    distance = tail - head;\r\n\r\n                this.drawShell(head, tail);\r\n                tail = head + (distance * value) / 100;\r\n\r\n                function animate() {\r\n                    requestID = window.requestAnimationFrame(animate);\r\n\r\n                    if (head <= tail) {\r\n                        context.beginPath();\r\n                        var newPos = head + 2 * movePerFrame;\r\n                        context.arc(center.x, center.y, radius, head, newPos, false);\r\n                        context.strokeStyle = foregroundColor;\r\n                        context.stroke();\r\n                        head = newPos;\r\n                    } else {\r\n                        cancelAnimationFrame(requestID);\r\n                    }\r\n                }\r\n                animate();\r\n            },\r\n\r\n            getBounds: function (type) {\r\n                var head, tail;\r\n                if (type == 'semi') {\r\n                    head = Math.PI;\r\n                    tail = 2 * Math.PI;\r\n                } else if (type == 'full') {\r\n                    head = 1.5 * Math.PI;\r\n                    tail = 3.5 * Math.PI;\r\n                } else if (type === 'arch') {\r\n                    head = 0.8 * Math.PI;\r\n                    tail = 2.2 * Math.PI;\r\n                }\r\n\r\n                return {\r\n                    head: head,\r\n                    tail: tail\r\n                };\r\n\r\n            },\r\n\r\n            drawShell: function (start, end) {\r\n                var context = this.context,\r\n                    center = this.getCenter(),\r\n                    radius = this.getRadius();\r\n                context.beginPath();\r\n                context.arc(center.x, center.y, radius, start, end, false);\r\n                context.strokeStyle = this.options.backgroundColor;\r\n                context.stroke();\r\n            },\r\n\r\n            clear: function () {\r\n                this.context.clearRect(0, 0, this.getWidth(), this.getHeight());\r\n            },\r\n\r\n            update: function () {\r\n                this.clear();\r\n                this.create();\r\n            },\r\n\r\n            destroy: function () {\r\n                this.clear();\r\n            },\r\n\r\n            getRadius: function () {\r\n                var center = this.getCenter();\r\n                return center.x - this.getThickness();\r\n            },\r\n\r\n            getCenter: function () {\r\n                var x = this.getWidth() / 2,\r\n                    y = this.getHeight() / 2;\r\n                return {\r\n                    x: x,\r\n                    y: y\r\n                };\r\n            },\r\n\r\n            getValue: function () {\r\n                var val = 0;\r\n                if (this.options.used && this.options.total) {\r\n                    val = (this.options.used / this.options.total) * 100;\r\n                    this.options.value = this.options.used;\r\n                } else {\r\n                    val = this.options.value;\r\n                }\r\n                return val;\r\n\r\n            },\r\n            getWidth: function () {\r\n                return this.context.canvas.width;\r\n            },\r\n\r\n            getHeight: function () {\r\n                return this.context.canvas.height;\r\n            },\r\n\r\n            getThickness: function () {\r\n                return this.options.thick;\r\n            },\r\n\r\n            getBackgroundColor: function () {\r\n                return this.options.backgroundColor;\r\n            },\r\n\r\n            getForegroundColor: function () {\r\n                return this.options.foregroundColor;\r\n            },\r\n\r\n            getLineCap: function () {\r\n                return this.options.cap;\r\n            },\r\n\r\n            getType: function () {\r\n                return this.options.type;\r\n            }\r\n\r\n        };\r\n\r\n\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            template: tpl,\r\n            scope: {\r\n                append: '@?',\r\n                backgroundColor: '@?',\r\n                cap: '@?',\r\n                foregroundColor: '@?',\r\n                label: '@?',\r\n                prepend: '@?',\r\n                size: '@?',\r\n                thick: '@?',\r\n                type: '@?',\r\n                value: '=?',\r\n                used: '=?',\r\n                total: '=?'\r\n\r\n            },\r\n            link: function (scope, element) {\r\n                scope.value = angular.isDefined(scope.value) ? scope.value : defaults.value;\r\n                scope.size = angular.isDefined(scope.size) ? scope.size : defaults.size;\r\n                scope.cap = angular.isDefined(scope.cap) ? scope.cap : defaults.cap;\r\n                scope.thick = angular.isDefined(scope.thick) ? scope.thick : defaults.thick;\r\n                scope.type = angular.isDefined(scope.type) ? scope.type : defaults.type;\r\n                scope.foregroundColor = angular.isDefined(scope.foregroundColor) ? scope.foregroundColor : defaults.foregroundColor;\r\n                scope.backgroundColor = angular.isDefined(scope.backgroundColor) ? scope.backgroundColor : defaults.backgroundColor;\r\n\r\n                var gauge = new Gauge(element, scope);\r\n\r\n                scope.$watch('value', watchData, false);\r\n                scope.$watch('used', watchData, false);\r\n                scope.$watch('total', watchData, false);\r\n                scope.$watch('cap', watchOther, false);\r\n                scope.$watch('thick', watchOther, false);\r\n                scope.$watch('type', watchOther, false);\r\n                scope.$watch('size', watchOther, false);\r\n                scope.$watch('foregroundColor', watchOther, false);\r\n                scope.$watch('backgroundColor', watchOther, false);\r\n\r\n                scope.$on('$destroy', function () {});\r\n                scope.$on('$resize', function () {});\r\n\r\n                function watchData(nv, ov) {\r\n                    if (!gauge) return;\r\n                    if (!nv || angular.equals(nv, ov)) return;\r\n                    gauge.update();\r\n                }\r\n\r\n                function watchOther(nv, ov) {\r\n                    if (!gauge) return;\r\n                    if (!nv || angular.equals(nv, ov)) return;\r\n                    gauge.destroy();\r\n                    gauge.init();\r\n                }\r\n            }\r\n        };\r\n    }\r\n}(angular));"]}